:PROPERTIES:
:ID:       ac338634-949e-4e3a-8d75-45bed92243c6
:END:
#+title: Setting up and using 
#+title: Xilinx KRIA KV260
#+filetags: :export:
#+subtitle: \begin{CJK}{UTF8}{min}南山大学\end{CJK}
#+author: Vincent Conus
#+date: 2023-8-24

* Introduction

** Motivation
This guide will present how to setup and use Xilinx's KRIA board, in particular
for running ROS on a host Ubuntu system, as well as for deploying
micro-ROS as a firmware on the MCU part of this board's chip.

The use of this device in particular is interesting because of the presence
of a CPU comprising both a general purpose ARM core, capable of running
a Linux distribution, as well as another ARM core, real-time enabled,
capable to run a RTOS.

** Build instructions for this report
The base file for this report is actually this README.org file itself.
However, upon local build, this file is regularly exported as
a ~.tex~ file that can be built normally.
On a moderately recent Ubuntu-base distribution, the following packages seemed to be required to build the
report:

#+BEGIN_SRC bash
  sudo apt-get install texlive-base texlive-latex-recommended texlive-lang-japanese
#+END_SRC

Then, the actual build can be made with a simple:

#+BEGIN_SRC bash
  pdflatex instructions.tex
#+END_SRC

No fancy Lua or theme at the moment !

*** Automatic build with CI/CD pipeline
If you don't want to build the report yourself, a CI pipeline is used to make it on GitLab.

You can check the steps in the .gitlab-ci.yml file.
This build uses a base Ubuntu image and basically takes the same steps as presented above for a local build.

A PDF artifact can be downloaded.

*** Headers and LaTeX settings for export
A large amount of headers and parameters are needed in order
to have this "README" document being exportable as a LaTeX
document formatted the way I wanted it to be.

The detail can be seen in the raw ~.org~ version of this README.

#+DESCRIPTION: A report presenting how to use and set Xilinx's Kria board
#+LANGUAGE: English

#+OPTIONS: toc:t date:t title:t

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[10pt]
#+LATEX_HEADER: \usepackage[a4paper, total={6.5in, 9in}]{geometry}

#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \setminted{breaklines}
#+LATEX_HEADER: \usepackage[AUTO]{inputenc}
#+LATEX_HEADER: \renewcommand{\familydefault}{\sfdefault}
#+LATEX_HEADER: \usemintedstyle{vs}

#+LATEX_HEADER: \usepackage[most]{tcolorbox}

#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage{xurl}
#+LATEX_HEADER: \usepackage{fontawesome5}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{float}

#+LATEX_HEADER: \newcommand{\gitlab}[1]{%
#+LATEX_HEADER:    \href{#1}{GitLab \faGitlab}}

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
     "\\begin{titlepage}\n"
     "\\centering\n"
     "{\\LARGE %t \\par }\n"
     "\\vspace{5mm}\n"
     "{\\large %s \\par}\n"
     "\\vspace{1cm}\n"
     "{\\large %D \\par}\n"
     "\\vspace{2cm}\n"
     "{\\large %a -  Source available at \\gitlab{https://gitlab.com/sunoc/xilinx-kria-kv260-documentation} \\par}\n"
     "\\vspace{3cm}\n"
     "\\includegraphics[width=0.8\\textwidth]{./img/board}"
     "\\end{titlepage}\n"))
#+end_src

#+begin_src emacs-lisp :exports results :results none :eval export
    (make-variable-buffer-local 'org-latex-toc-command)
    (setq org-latex-toc-command (concat
       "\\tableofcontents\n"
       "\\pagebreak\n"))
#+end_src

* Boot firmware
The goal for the Linux side of the deployment is to
have the latest LTS version of Ubuntu up and running.
In order to be able to boot such a newer version of Linux, the
boot image of the board must first be updated.

The procedure is available in [[https://docs.xilinx.com/r/en-US/ug1089-kv260-starter-kit/Firmware-Update][the official documentation]],
but I will present it step by step here.

** Getting the new firmware
A 2022 version of the board firmware is required in order to run the latest
version of Ubuntu properly.

The image can be downloaded at [[https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/1641152513/Kria+K26+
SOMoot-FW-update-with-xmutil][the atlassian page]] on the topic,
or even directly with the following command:

#+BEGIN_SRC sh
  wget https://www.xilinx.com/member/forms/download/\
       design-license-xef.html?filename=BOOT-k26-starter-kit-20230516185703.bin
#+END_SRC


** Reaching the board recovery tool
Now the firmware ~.bin~ image is available, it is possible to update it using the
boards recovery tool. Here are the steps that must be taken in order to reach
this tool and update the board:

+ Connect the board to your machine via a Ethernet cable.
  This will obviously cut you internet access, so you should be set for that.
+ Select the wired network as your connection (must be "forced", since it
  doesn't have internet access).
+ Set a fixed IP address for your machine, in the ~192.168.0.1/24~
  range, except the specific ~192.168.0.111~, which will be used by the
  board.
+ Using a web browser on your host machine, access
  ~http://192.168.0.111~. Thou shall now see the interface, as visible on
  the figure [[fig:recovery]] below.

#+ATTR_LATEX: :width 1\textwidth
#+CAPTION: The recovery tool for the board, access from Firefox. We can see
#+CAPTION: board information at the center, and the tools to upload the firmware at
#+CAPTION:   the bottom of the page.
#+NAME: fig:recovery
[[file:img/recovery.png]]

** Updating the boot firmware
From this "recovery" page, it is possible to upload the ~.bin~ file downloaded previously onto
the board using the "Recover Image" section at the bottom right of the page.

The board can be re-booted afterwards.

* Installing Linux
Withe the boot firmware being up-to-date, we can proceed to install a Linux distribution
on our Kria board. The step needed to archive a full installation of Ubuntu 22.04
will be presented in this section.

** Preparing and booting a Ubuntu 22.04 media
An [[https://ubuntu.com/download/amd-xilinx][official Ubuntu image]] exists and is
provided by Xilinx, allowing the OS installation to be quick and
straightforward.
Ubuntu is a common and easy to use distribution. Furthermore,
it allows to install ROS2 as a package, which is most convenient and will be
done later in this guide.

Once the image has been downloaded at [[https://ubuntu.com/download/amd-xilinx][Canonical's page]]
we can flash it onto the SD card, with the following instructions.

#+LATEX: \begin{tcolorbox}[colback=red!5!white,colframe=red!75!black]
*WARNING*: The next part involve the ~dd~ command writing on disks!!!
As always with the dd command, thou have to be *VERY* careful on what arguments
thou give. Selecting the wrong disk will result on the destruction of
thy data !!
_If you are unsure of what to do, seek assistance !_
#+LATEX: \end{tcolorbox}

With the image available on thy machine and a SD card visible as ~/dev/sda~
[fn:1] one can simply run the ~dd~ command as follow to
write the image to a previously formatted drive (here ~/dev/sda~):

#+BEGIN_SRC sh
  sudo dd if=iot-limerick-kria-classic-desktop-2204-x07-20230302-63.img \
  of=/dev/sda status=progress bs=8M && sync
#+END_SRC


Once the SD card is flashed and put back in the board, the micro-USB cable can be
connected from the PC to the board. It is then possible to
connect to the board in serial with an appropriate tool, for example ~picocom~,
as in the following example (the serial port that "appeared" was the ~/dev/ttyUSB1~ in this case,
and the 115200 bitrate is the default value for the board):

#+BEGIN_SRC sh
  sudo picocom /dev/ttyUSB1 -b 115200
#+END_SRC

Once logged in, it is typically easier and more convenient to connect the board
using SSH. When the board is connected to the network, it is possible to know
it's IP address with the ~ip~ command; then it is possible to connect to
the board with ssh, as follow (example, with the first command to be run on the board
and the second one on the host PC, both without the first placeholder hostnames):


#+BEGIN_SRC sh
  kria# ip addr

  host# ssh ubuntu@192.168.4.11
#+END_SRC




* Enabling ~remoteproc~

* Loading a real-time firmware

* Building micro-ROS as a static library

* Building a real-time firmware

** Setting up Vitis IDE

* Adding micro-ROS to a firmware project

* Loading a real-time firmware 

* Running a ROS2 node

** On the host Linux

** In a container

* micro-ROS agent

#+LATEX: \pagebreak
#+LATEX: \appendix
* DTO patch  
#+LATEX: \inputminted[linenos, frame=single]{diff}{./src/system.patch}

#+LATEX: \pagebreak
* Custom toolchain CMake settings
#+LATEX: \inputminted[linenos, frame=single]{cmake}{./src/custom_r5f_toolchain.cmake}

#+LATEX: \pagebreak
* Custom Colcon meta settings
#+LATEX: \inputminted[linenos, frame=single]{yaml}{./src/custom_r5f_colcon.meta}

#+LATEX: \pagebreak
* Firmware time functions

** main
#+LATEX: \inputminted[linenos, frame=single]{c}{./src/clock.c}

** header file
#+BEGIN_SRC C
  /**< Microseconds per second. */
  #define MICROSECONDS_PER_SECOND    ( 1000000LL )  
  /**< Nanoseconds per second. */
  #define NANOSECONDS_PER_SECOND     ( 1000000000LL ) 
  /**< Nanoseconds per FreeRTOS tick. */  
  #define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) 
#+END_SRC


#+LATEX: \pagebreak
* Firmware memory allocation functions

** main
#+LATEX: \inputminted[linenos, frame=single]{c}{./src/allocators.c}

** header file
#+BEGIN_SRC C
  #ifndef _ALLOCATORS_H_
  #define _ALLOCATORS_H_

  #include "microros.h"

  extern int absoluteUsedMemory;
  extern int usedMemory;


  void * __freertos_allocate(size_t size, void * state);
  void __freertos_deallocate(void * pointer, void * state);
  void * __freertos_reallocate(void * pointer, size_t size, void * state);
  void * __freertos_zero_allocate(size_t number_of_elements,
  size_t size_of_element, void * state);

  #endif // _ALLOCATORS_H_
#+END_SRC

* Footnotes

[fn:1] Again, it is critical to be 100\% certain that you are working with
the correct device! 
