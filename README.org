:PROPERTIES:
:ID:       ac338634-949e-4e3a-8d75-45bed92243c6
:CATEGORY: KRIA
:END:
#+title: Setting up and using Xilinx KRIA KV260 and KR260
#+filetags: :export:
#+subtitle: \begin{CJK}{UTF8}{min}南山大学\end{CJK}
#+author: Vincent Conus
#+email: vincent.conus@protonmail.com
#+date: 2025-02-28

[[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/commits/main][https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/badges/main/pipeline.svg?style=svg]]

* About                                 :noexport:
The goal of this repository is to serve as a documentation in general for using
Xilinx's KRIA board with Ubuntu and ROS2.

More detail is available in the Section [[Introduction & motivation]].

* Headers and LaTeX settings for export :noexport:
A large amount of headers and parameters are needed in order
to have this "README" document being exportable as a LaTeX
document formatted the way I wanted it to be.

The detail can be seen in the raw ~.org~ version of this README
and stays hidden in a :noexport: section in this report.

#+DESCRIPTION: A report presenting how to use and set Xilinx's KRIA board
#+LANGUAGE: English

#+OPTIONS: H:3 toc:t date:t title:t email:t

#+LATEX_COMPILER:

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[10pt]
#+LATEX_HEADER: \usepackage[a4paper, total={6.5in, 9in}]{geometry}

#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \setminted{breaklines}
#+LATEX_HEADER: \usepackage[AUTO]{inputenc}
#+LATEX_HEADER: \renewcommand{\familydefault}{\sfdefault}
#+LATEX_HEADER: \usemintedstyle{vs}

#+LATEX_HEADER: \usepackage[most]{tcolorbox}

#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage{xurl}
#+LATEX_HEADER: \usepackage{fontawesome5}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{float}

#+LATEX_HEADER: \newcommand{\gitlab}[1]{%
#+LATEX_HEADER:    \href{#1}{GitLab \faGitlab}}

#+begin_src emacs-lisp :exports results :results none :eval export
(make-variable-buffer-local 'org-latex-title-command)
(setq org-latex-title-command (concat
			       "\\begin{titlepage}\n"
			       "\\centering\n"
			       "{\\LARGE %t \\par }\n"
			       "\\vspace{5mm}\n"
			       "{\\large %s \\par}\n"
			       "\\vspace{1cm}\n"
			       "{\\large %D \\par}\n"
			       "\\vspace{2cm}\n"
			       "{\\large %a -  Source available at \\gitlab{https://gitlab.com/sunoc/xilinx-kria-kv260-documentation} \\par}\n"
			       "\\vspace{3cm}\n"
			       "\\includegraphics[width=0.8\\textwidth]{./img/boards}"
			       "\\end{titlepage}\n"))
#+end_src

#+begin_src emacs-lisp :exports results :results none :eval export
(make-variable-buffer-local 'org-latex-toc-command)
(setq org-latex-toc-command (concat
			     "\\tableofcontents\n"
			     "\\pagebreak\n"))
#+end_src

* Building this report from the LaTeX file                         :noexport:
The base file for this report is actually this README.org file itself.  However,
upon local build, this file is regularly exported as a ~.tex~ file that can be
built normally.  On a moderately recent Ubuntu-base distribution, the following
packages seemed to be required to build the report:

#+BEGIN_SRC bash
sudo apt-get install texlive-base texlive-latex-recommended texlive-lang-japanese
#+END_SRC

Then, the actual build can be made with a simple:

#+BEGIN_SRC bash
pdflatex README.tex
#+END_SRC

* Introduction & motivation
This guide will present how to setup and use Xilinx's KRIA boards, in particular
for running ROS2 on a host Ubuntu system, as well as for deploying
micro-ROS[[cite:&Belsare2023]] as a firmware on the micro-controller part of this board's chip.

The use of this device in particular is interesting because of the presence of a
SoC comprising both a general purpose ARM core (Cortex A53), capable of running
a Linux distribution, as well as another ARM core, real-time enabled, capable to
run a RTOS (Cortex R5F). The figure [[fig:map]] below shows a schematic view of the
overall system we are trying to archive.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: The Linux and ROS2 environment (orange) will
#+CAPTION: communicate with the real-time, FreeRTOS and micro-ROS
#+CAPTION: side (blue) using RPMsg (shared memory).
#+NAME: fig:map
[[file:img/map.png]]

This document will give a step-by-step, chapter by chapter indication on how to go from a new board
to a system ready to be used for testing internal communication for ROS, between both types of cores
using the SoC shared memory.

#+latex: \pagebreak
* Boot firmware update
#+INCLUDE: "./boot_firmware.org" :minlevel 2 :lines "6-73"
#+latex: \clearpage
** COMMENT LINK: [[id:be2ce0ab-07db-49e6-be50-72f2db76cde3][KRIA board boot firmware update]]

* Installing Ubuntu LTS 22.04
#+INCLUDE: "./install_ubuntu.org" :minlevel 2 :lines "34-704"
#+latex: \clearpage
** COMMENT LINK: [[id:582fe4ef-a301-4b53-b908-a5c2b5b6d694][KRIA board Ubuntu LTS 22.04 Install]]

* Building micro-ROS as a static library
#+INCLUDE: "./libmicroros.org" :minlevel 2 :lines "6-63"
#+latex: \clearpage
** COMMENT LINK: [[id:54ac81d8-2545-47ac-b2d0-a18417086f2c][KRIA board Building micro-ROS as a static library]]

* ROS2 host system setup
#+INCLUDE: "./ros_system.org" :minlevel 2 :lines "6-150"
#+latex: \clearpage
** COMMENT LINK: [[id:9a6622c8-2366-426d-a194-31cb79c3d571][Robot Operating System (ROS2) setup]]

* Micro-ROS Client
#+INCLUDE: "../libmicroros_kv260/README.org" :minlevel 2 :lines "6-"
#+latex: \clearpage
** COMMENT LINK:[[id:24cb8127-6bc5-4b67-8700-741622e8895d][libmicroros]]

* micro-ROS XRCE-DDS Agent :WORK_IN_PROGRESS:
The micro-ROS Agent on the ROS2 side is the last piece of the puzzle needed to
allow our DDS environment to use RPMsg as a mean of communication, as visible
on the schematic of the figure [[fig:map_agent]] below.
In particular, it will be useful to modify this agent in order to archive
the full RPMsg communication for ROS2[fn:19].
An [[https://micro.ros.org/docs/tutorials/advanced/create_custom_transports/][official documentation]] exists, but it gives little to no detail
on how to deploy such modified, custom transport setup.
This part of the guide will focus on it.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: The agent (red border) allows for a micro-ROS
#+CAPTION: instance to communicate with a ROS2 system.
#+CAPTION: It is deployed on the Linux side, as a ROS2 node.
#+NAME: fig:map_agent
[[file:./img/map_agent.png]]

** Building a XRCE-DDS agent in a Docker
The same command presented above for running a custom agent "bare-metal" can be
run inside a Docker.

#+BEGIN_SRC sh
docker run -d --name XRCE_DDS_Agent -it --net=host -v \
       /dev:/dev --privileged ros:iron
docker exec -it XRCE_DDS_Agent bash
#+END_SRC


#+BEGIN_SRC sh
git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
cd Micro-XRCE-DDS-Agent
docker build -t xrce-dds-agent .
docker run -it --privileged -v /dev:/dev xrce-dds-agent serial \
       --dev /dev/ttyACM0
#+END_SRC


git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
cd Micro-XRCE-DDS-Agent
docker build -t xrce-dds-agent .
docker run -it --privileged -v /dev:/dev xrce-dds-agent serial \
       --dev /dev/ttyACM0
#+END_SRC

* Talker Node                   :WORK_IN_PROGRESS:

#+latex: \clearpage
* Running the ping-pong node    :WORK_IN_PROGRESS:
A custom ping-pong node for ROS2 was developed in order to test the data transfer of the newly created
Agent / Client system.

In order to have this node up and running, you need to set basically all the previously presented points:
- The micro-ROS firmware is running on the R5F core, as presented in the section [[Loading the firmware]].
- On the same Linux you plan to run the node, you will need to run and keep the Agent, as presented
  in the section [[micro-ROS XRCE-DDS Agent]].
- This ping-pong application is released as a ROS2 Python node. It is best to pull and run it
  in a ROS2 environment to avoid having dependencies issues, as presented in the section about ROS2.

  #+latex: \clearpage
* Monitoring and performances evaluation :WORK_IN_PROGRESS:

  #+latex: \clearpage
* Shared memory data transfer system :WORK_IN_PROGRESS:


#+latex: \clearpage
* Conclusion & future           :WORK_IN_PROGRESS:


# ================================================================================
# APPENDIX
# ================================================================================
#+LATEX: \clearpage
#+LATEX: \appendix

* DTO patch
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/system.patch][system.patch]]
#+LATEX: \inputminted[linenos, frame=single]{diff}{./src/system.patch}

#+LATEX: \clearpage
* Custom tool-chain CMake settings
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/custom_r5f_toolchain.cmake][custom r5f toolchain.cmake]]
#+LATEX: \inputminted[linenos, frame=single]{cmake}{./src/custom_r5f_toolchain.cmake}

#+LATEX: \clearpage
* Custom Colcon meta settings
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/custom_r5f_colcon.meta][custom r5f colcon.meta]]
#+LATEX: \inputminted[linenos, frame=single]{yaml}{./src/custom_r5f_colcon.meta}

#+LATEX: \pagebreak
* [deprecated] Installing Linux (PetaLinux option)
This part is an alternative to the previous section [[Installing Ubuntu LTS 22.04]],
where the installation of PetaLinux as a host system[fn:24] will be presented,
as being an alternative to the Ubuntu LTS. Here are some reasoning why you'd
prefer to use PetaLinux instead of Ubuntu:
+ Direct support from Xilinx. While Ubuntu is also an official port, it is
  provided through Canonical.
+ If you plan to use ROS2 in containers.

It is also to be noted that the building process of a PetaLinux image is not as
trivial as simply flashing a downloaded ISO file. It takes some time to
configure it and even more time to be built, especially if you are working on a
lower-end machine.

** General installation
The indication on how to install PetaLinux on a KRIA board is detailed in the
official documentation[fn:25], but for the KV260 board with an older release of
the Linux. This guide will try to keep an up-to-date version of the guide, in
particular for the KR260 KRIA board and, at the time of writing, the PetaLinux
in version 2023.2 for the installer.  The 2022.2 version is recommended for this
board's latest updated boot firmware, as presented in the Section Boot firmware
above; however I happened to have issues with the building process from a system
based on Ubuntu 22.04. Thus the choice of the 2023.2 that should be compatible.

Two tools should be downloaded upfront in order to be ready and create the
PetaLinux image for our target board. Both can be obtained at the Xilinx
official download page[fn:26]. Login with an AMD account is required in order to
download the files we need, namely, we'll have to get:
+ The installer tool: ~petalinux-v2023.2-10121855-installer.run~ or similar name.
+ The SOM board support package: ~xilinx-kr260-starterkit-v2023.2-10140544.bsp~ or similar name[fn:29].
The specific name of the utils you'll get to download will evolve over time.

For the following command, I will assume that both files were downloaded into
the same directory and that you have a shell open in said directory.

Firstly, a crap ton of dependencies are needed. They are detailed in the
release notes of the version of the tool you are downloading and it depends on
your distribution, but here is a one-liner that works for the PetaLinux 2023.2
to be built on Ubuntu(-based) 22.04 LTS:
#+BEGIN_SRC sh
sudo apt-get install iproute2 gawk python3 build-essential gcc git make \
     net-tools libncurses5-dev tftpd zlib1g-dev libssl-dev flex bison libselinux1 \
     gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip \
     texinfo zlib1g-dev gcc-multilib automake zlib1g:i386 screen pax gzip cpio \
     python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git \
     python3-jinja2 libegl1-mesa libsdl1.2-dev pylint asciidoc
#+END_SRC

Testing, if building on Debian 12 the following variant of the same command has been confirmed to work:
#+BEGIN_SRC sh
sudo apt-get install iproute2 gawk python3 build-essential gcc git make \
net-tools libncurses5-dev tftpd-hpa zlib1g-dev libssl-dev flex bison libselinux1 \
gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip \
texinfo zlib1g-dev gcc-multilib automake zlib1g screen pax gzip cpio python3-pip \
python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 \
libegl1-mesa libsdl1.2-dev pylint asciidoc
#+END_SRC

Installing the PetaLinux tools can be done with the ~.run~ script[fn:28], as follow:
#+BEGIN_SRC sh
sudo chmod +x ./petalinux-v2023.2-10121855-installer.run
./petalinux-v2023.2-10121855-installer.run
bash
source settings.sh
#+END_SRC

A project can then be created, using the ~.bsp~ file. From there it is possible to
build the image file meant to be booted by the board:
#+BEGIN_SRC sh
petalinux-create -t project -s xilinx-kr260-starterkit-v2023.2-10140544.bsp
cd xilinx-kr260-starterkit-2023.2/
#+END_SRC


The more general option allows to enable stuff related to hardware
configuration[fn:33]. For this step, it is possible to select the ~OpenAMP~
setting the the DTG Settings, as visible in the Figure [[fig:yocto_openamp_dtg]] below:
#+BEGIN_SRC sh
petalinux-config --get-hw-description  ./hardware/xilinx-kr260-starterkit-2023.2/kr260_starter_kit.xsa
#+END_SRC

Then, here are the options that we want to enable:
#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: In the hardware config, it is possible to select the openamp device tree source.
#+NAME: fig:yocto_openamp_dtg
[[file:./img/yocto_openamp_dtg.png]]

Some kernel and module configuration are needed in order for the PetaLinux system to work properly.
These setup can be set using the following command:
#+BEGIN_SRC sh
petalinux-config -c rootfs
#+END_SRC

Then, here are the options that we want to enable:
#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: In the rootfs config, it is possible to select the openamp package.
#+NAME: fig:yocto_openamp
[[file:./img/yocto_openamp.png]]


#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: OpenSSH can be configure in the same rootfs config.
#+NAME: fig:yocto_ssh
[[file:./img/yocto_ssh.png]]

It is then possible to build[fn:32] and package the image. Most critically compared to the example,
the ~openamp.dtb~ overlay must be used in order for OpenAMP and subsequently RPMsg to become usable.
#+BEGIN_SRC sh
petalinux-build
petalinux-package --wic --bootfiles "ramdisk.cpio.gz.u-boot boot.scr Image system.dtb"
#+END_SRC

#+LATEX: \begin{tcolorbox}[colback=red!5!white,colframe=red!75!black]
*DANGER*: The next part involve the ~dd~ command writing on disks!!!
As always with the dd command, thou have to be *VERY* careful on what arguments
thou give. Selecting the wrong disk will result on the destruction of
thy data !!
_If you are unsure of what to do, seek assistance !_
#+LATEX: \end{tcolorbox}

Finally, and now an image has been generated, it can be burnt to a micro-SD card the usual way:
#+BEGIN_SRC sh
sudo dd if=./images/linux/petalinux-sdimage.wic \
     of=/dev/sda status=progress bs=8M && sync
#+END_SRC

From that point, the media can be ejected, put in the board and the boot process
should happen successfully.

** First login
On the first start, if you have a serial terminal open to the KR260 board, you'll be prompter to enter a login.
The default user it ~PetaLinux~. You'll then be prompted to enter a password.

** Testing openamp "echo-test"
A good and out-of-the-box way to try and confirm that the OpenAMP setup was done
properly is to run the so-called "echo-test". This program will basically send
series of packages to the R5F core and expect them to be returned.

As presented in the official documentation[fn:34], this can be simply done with
the following commands. If the return of the ~echo_test~ commands states that zero
error occurs, the system should be good to go:
#+BEGIN_SRC sh
sudo -s
echo image_echo_test  > /sys/class/remoteproc/remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
echo_test
echo stop > /sys/class/remoteproc/remoteproc0/state
#+END_SRC

** "echo-test" performance comparison

*** Raw plot of the package measurement                          :noexport:
#+BEGIN_SRC python :results file :eval no-export
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

df_kr = pd.read_csv('./csv/kr260_echo_test.csv', names=['time KR260 (PetaLinux)'])
df_kv = pd.read_csv('./csv/kv260_echo_test.csv', names=['time KV260 (Ubuntu)'])

df_payload = pd.DataFrame([s] for l in range(0, 10, 1) for s in range(17, 489, 1))

df_tot_2 = pd.concat([df_kr, df_kv, df_payload], sort=False, axis=1)

df_tot_2 = df_tot_2.rename(columns={0:'Payload size'})

df_tot_2['time KR260 (PetaLinux)'] = df_tot_2['time KR260 (PetaLinux)'].div(df_tot_2['Payload size'])
df_tot_2['time KV260 (Ubuntu)'] = df_tot_2['time KV260 (Ubuntu)'].div(df_tot_2['Payload size'])

df_tot_2 = df_tot_2.sort_values(by=['Payload size'], ascending=True)
df_tot_2 = df_tot_2.drop(columns=['Payload size'])

df_tot_2 = df_tot_2.reset_index(drop=True)

df_tot_2 = 1/df_tot_2
df_tot_2 = df_tot_2.mul(1000)

plt.rc('font', size=10)

scatterplot = df_tot_2.plot(style='.', grid='true')
scatterplot.set_xlabel('Package sent [n]')
scatterplot.set_ylabel('Data throughput [MB/s]')
# scatterplot.set_yscale("log");
# densityplot = df_tot_2.plot.density(grid='true', xlim=[0.2, 0.9])
# densityplot.set_xlabel('Round trip time for one RPMsg package [us]')
# densityplot.set_ylabel('Probability density [%]')
plt.savefig('./img/kr260_echo_test_density.png', dpi=400, bbox_inches='tight')
return './img/kr260_echo_test_density.png'
#+END_SRC

#+RESULTS:
[[file:./img/kr260_echo_test_density.png]]


*** Report :ignore:
Now we have a working demonstration for RPMsg, a goal was to compare this system between boards.

Here is the complete sequence in order to archive a timely measured ~echo_test~ run, namely:
- Installation of the build dependencies
- Clone of the Xilinx repository
- Patching of the main source to add the time measurement
- Building of the test software
- Communication with the R5F, with reload of the firmware
#+BEGIN_SRC sh
sudo dnf install git make gcc binutils packagegroup-core-buildessential
sudo ln -s /usr/bin/aarch64-xilinx-linux-gcc /bin/cc
git clone https://github.com/OpenAMP/openamp-system-reference.git
cd openamp-system-reference/examples/linux/rpmsg-echo-test/
wget https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/raw/main/src/echo_test.patch
patch -u -b echo_test.c -i echo_test.patch
make
sudo -s
echo image_echo_test  > /sys/class/remoteproc/remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
./echo_test
echo stop > /sys/class/remoteproc/remoteproc0/state
#+END_SRC


The figure [[fig:kr260_echo_test_density]] below shows a comparison for the data
throughput that is reachable for a packages round trip of individual RPMsg
packages for both PetaLinux running on the KR260 board and Ubuntu running on the
KV260.

A difference exist but it is not as significant as to explain the rather slow
transfer rate when used in combination with ROS2 DDS.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: A graph of the data transfer rate for individual packages to be transmitted and received back from the Linux.
#+NAME: fig:kr260_echo_test_density
[[file:./img/kr260_echo_test_density.png]]

This fast delay for data transmission was later confirmed by measurement done using an external logic analyser[fn:35].

** Enabling SSH
** Setting up a static IP address for PetaLinux
This is not a trivial task in PetaLinux.

As it appears, the classic ~/etc/network/interfaces~ must be modified, however and
for some unknown reason the DHCP keep being used even when disabled, and the
actual static interface is not used until restarted.

Multiple steps are required in order to mitigate all of this.

First, we can make our standard ~interfaces~ configuration, in the  ~/etc/network/interfaces~:
#+BEGIN_SRC sh
# Wired or wireless interfaces
auto eth0
iface eth0 inet static
address 192.168.11.107
netmask 255.255.255.0
network 192.168.11.0
gateway 192.168.11.1
#+END_SRC

Then we need to have ~systemd~ to run a script after boot time to restart the ~eth0~ interface.

A very basic script, as follow need to be placed somewhere on the system, for example here, in the ~/home/root/net.sh~:
#+BEGIN_SRC sh
#!/bin/sh -e
ifdown eth0
ifup eth0
exit 0
#+END_SRC

Then, we want to create a ~systemd~ service that will run this script as ~idle~,
i.e. after all the rest. Said file, in our case named ~updown.service~ must be
placed in the ~/etc/systemd/system/~ directory:
#+BEGIN_SRC yaml
[Unit]
Description=Restart once more the eth0 network to enable the static IP

[Service]
Type=idle
ExecStart=/bin/sh /home/root/net.sh

[Install]
WantedBy=multi-user.target
#+END_SRC

Finally, as a ~root~ we need to set the correct right for these files and finally enabling the service before reboot:
#+BEGIN_SRC sh
sudo -s
chmod +x /home/root/net.sh
chmod 644 /etc/systemd/system/updown.service
systemctl enable updown.service
reboot now
#+END_SRC

With all of this, on the next reboot of the board, the static IP should be available alongside the DHCP IP.

** Note: good points for PetaLinux over Ubuntu :noexport:
+ The boot process in insanely faster: a few seconds for PetaLinux versus multiple minutes with Ubuntu.
+ +The fan is silent all the way through, and seemingly managed in a better way.+
  This seems to stop being true once we update the board packages with
  ~dnf~. Unknown reason for now. There is an issue with the ZynqMP Linux PIN
  control system, as visible in the ~dmesg~ log.
+ OpenAMP and the echo test app works fairly "out of the box" if configured
  properly during the build process.

* [deprecated] micro-ROS Client
** micro-ROS adaptation for the firmware
Beyond the inclusion of the library itself, actually using the micro-ROS system
within an external project require more than just importing the needed
functions.

Indeed, if you would be just adding the various function for sending messages to
the general ROS2 network, you would face issues with four key aspects.
These are presented in the following dedicated sub-sections.

*** Time functions
As micro-ROS can be used on a variety of board, it does not understand by itself
what time functions are meant to be used.

In that regard, some API-style function are being
used in the library and it is then needed for the person using a new board
to implement these function inner working using the board own time-related
function calls.

In particular for this part, the ~clock_gettime~ function is key, and could
simply be implemented with some FreeRTOS time functions.

*** Custom transport layer
This part is the key translation layer that needs to happen in order for the
DDS system from the micro-ROS library to be using the communication channel we
want it to.

A problem that had to be figured out lives in the fact that the operation of micro-ROS DDS
and the board's RPMsg communication system does not operate in the same fashion.

The former expects to have four functions ("open", "read", "write" and "close") that can
be called and used by the main system, while the latter relies on FreeRTOS callback
system, waiting on the service interrupt routine to be trigger by an incoming message.

This situation meant that we count not simple translate the communication layers from one
to another: a non-blocking polling and buffer system needed to be put into places.
The proposed solution that was implemented and that is currently being tested
is showed and detailed in the figure [[fig:rpmsg_fw_tasks]] below.

The next figure [[fig:client_arch]] show a more visual representation of the two tasks and the
functions used in them.

#+ATTR_LATEX: :width .9\textwidth
#+CAPTION: Two tasks are being run concurrently in order to manage the
#+CAPTION: communication situation, with binary semaphore-based lock-unlock system.\\
#+CAPTION: The role of the micro-ROS task (red) is to make the four functions
#+CAPTION: ("open", "read", "write" and "close")  available and running the actual
#+CAPTION: software function. In this example, polling the read function and writing
#+CAPTION: back when something is receive (ping-pong function).
#+CAPTION: The use of the ~rpmsg_send()~ function is done directly from the micro-ROS task,
#+CAPTION: bypassing the RPMsg task in this situation.\\
#+CAPTION: In the libmicroros implementation currently being developed, the micro-ROS task
#+CAPTION: holds all the DDS and micro-ROS system, including the mentioned allocators function.\\
#+CAPTION: The RPMsg task (green) is used to firstly set the RPMsg communication
#+CAPTION: with the Linux system, then it stays locked until the ISR (interrupt service routine)
#+CAPTION: is triggered by an incoming message. The message is then passed to the micro-ROS
#+CAPTION: task using a buffer.\\
#+CAPTION: When a shutdown signal is received from the Linux, both functions will gracefully close
#+CAPTION: and are getting killed.
#+NAME: fig:rpmsg_fw_tasks
[[file:./img/tasks.png]]

#+ATTR_LATEX: :width .9\textwidth
#+CAPTION: Functions architecture for the Client firmware.
#+NAME: fig:client_arch
[[file:./img/client_arch.png]]

A version of this firmware is available at my gitlab repository[fn:20]. This firmware was built using
Xilinx's IDE, which setup was presented in the section [[Setting up the IDE]], however it was tested
and given the provided ~Makefile~ system, it is possible to modify and rebuild the firmware
without this specific tools, as long as the compiler is installed correctly.

Beyond the general two-tasks behavior of the figure [[fig:rpmsg_fw_tasks]], here are the main steps
of the execution of the firmware:
+ During the RPMsg init phase (RPMsg task), a "hello" message is exchanged with the Linux side
  to confirm the OpenAMP system is also ready there.
+ Memory allocations and custom transport function are set in the micro-ROS task.
+ The micro-ROS and it's ~rclc~ system run extensive initialization tasks to:
  - Initialize the support system
  - Initialize the support node
  - Initialize the publishers
  - Initialize the subscribers
+ Finally, the ping-pong function become effective with the micro-ROS task
  polling to receive some message and sending it back to the sender.


#+LATEX: \clearpage
** Loading the firmware
Having a version of our ~.elf~ firmware (with or without the included
micro-ROS library) built and loaded onto our Kria's Linux, we want to load and run it
on the Cortex micro-controller side.

As a reminder, the firmware can be loaded from the host machine IDE workspace
to the KRIA board through ~SSH~ using the following command:
#+BEGIN_SRC sh
scp /home/sunoc/workspace/rpmsg_pingpong_microros_lib/\
    Debug/rpmsg_pingpong_microros_lib.elf  ubuntu@192.168.1.10:/home/ubuntu/
#+END_SRC

The following instructions will show how to use this binary file, and
in particular how to upload and start the firmware on the R5F real time core
from the Linux user-space[fn:11], to test a basic RPMsg setup[fn:12]:
#+BEGIN_SRC sh
sudo -s
mv image_echo_test /lib/firmware
echo image_echo_test  > /sys/class/remoteproc/\
     remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
echo_test
echo stop > /sys/class/remoteproc/remoteproc0/state
#+END_SRC

In this setup you need to be careful for the name of the ~.elf~ binary to be exactly used
in the first ~mv~ and ~echo~ command. In this example, the binary would be named
~image_echo_test.elf~, and moved from ~$HOME~ to ~/lib/firmware~.

The debug of the firmware itself is done by reading the "printf" visible from the serial
return of the board (typically a ~/dev/ttyUSB1~), but two things are to be noted:
+ If the ~echo start~ command fails, either the previous firmware run was not stopped,
  or the new binary itself is impossible to run.
+ In general, if the ~echo_test~ runs, it means that everything is okay and that
  the RPMsg system worked successfully.

#+LATEX: \clearpage
** Loading the firmware using JTAG and Vitis IDE
This is more of an alternative way, but it is possible to load the Client
firmware onto the Cortex R5F onto the board from a host PC IDE, without booting or
using the Linux on the KRIA board itself.

This section will present the way to do so, and most critically, the steps that must
be taken beforehand on the host machine for that system to work.

There are two key advantaged to using this method:
- The load time for the firmware is real fast. In particular, re-loading the
  firmware doesn't require to reboot the entire Linux system.
- IDE debugging available. Running the JTAG on the board allows for the firmware
  to be debugger in a easier way.

*** Testing ~xsct~ and running the drivers
Firstly, this part of the guide assumes that a version of the Vitis Classic IDE
was installed on the host system. Some of the needed tools to test the working of the JTAG
system are located in the installation directory of the IDE.

In my case, I'll have to go to ~~/tools/Xilinx/Vitis/2023.2~, but your mileage might vary
depending on the settings you choose during the IDE installation and also the version of
the IDE itself.

**** Drivers
Firstly, we need to load some drivers in order for the JTAG USB system to work:
#+BEGIN_SRC bash
sudo ./data/xicom/cable_drivers/lin64/install_script/install_drivers/install_drivers
#+END_SRC

**** ~dialout~ access
It is also much needed for the user that runs the IDE to have read/write access to the
USB devices. This can be done as follow, as root:
#+BEGIN_SRC sh :dir "/sudo::"
usermod -aG dialout ${USER}
#+END_SRC

You'll need to log out and log back it for the changes to apply though.

**** TCL JTAG boot
A short TCL program was provided by Honda-sensei and should be loaded in order
for the board to boot in JTAG mode.
The following code block shows the TCL, and it should be saved somewhere, for example
in ~~/Downloads/boot_jtag.tcl~:
#+BEGIN_SRC tcl :tangle ~/Downloads/boot_jtag.tcl
proc boot_jtag { } {
############################
# Switch to JTAG boot mode #
############################
targets -set -filter {name =~ "PSU"}
# update multiboot to ZERO
mwr 0xffca0010 0x0
# change boot mode to JTAG
mwr 0xff5e0200 0x0100
# reset
rst -system
}


# Jtag connection 
connect
puts stdout "Connect Jtag"

# Switching to JtagBoot
puts -nonewline stdout "Start transition to jtag boot mode..."
boot_jtag
puts stdout "done."

# Jtag disconnection
puts -nonewline stdout "Disconnect Jtag..."
disconnect
puts stdout "done."
#+END_SRC

Eventually it is possible to load the JTAG boot script as follow:
#+BEGIN_SRC bash
cd ~/tools/Xilinx/Vitis/2023.2
source settings64.sh
xsct -norlwrap ~/Downloads/boot_jtag.tcl
#+END_SRC

*** Vitis IDE classic
Note that the steps presented here must be taken after running the ~xsct~ command; without rebooting the board in the mean time.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: With a project meant to be build and run on the Cortex R5F,
#+CAPTION: you must first produce the ~.elf~ binary file.
#+NAME: fig:map_ros
[[file:./img/jtag/design.png]]

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: Then you can open the Debug Configuration window.
#+NAME: fig:map_ros
[[file:./img/jtag/debug_config.png]]

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: All parameters should stay the same. You can then run "Debug".
#+NAME: fig:map_ros
[[file:./img/jtag/debug_config2.png]]

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: The XSCT console will confirm the successful load of the firmware.
#+CAPTION: If not, you will get error messages and should reboot the board.
#+NAME: fig:map_ros
[[file:./img/jtag/console.png]]

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: Selecting the Cortex R5, core #0, you can then run the application.
#+NAME: fig:map_ros
[[file:./img/jtag/run.png]]

#+LATEX: \clearpage
* micro-ROS XRCE-DDS Agent
The micro-ROS Agent on the ROS2 side is the last piece of the puzzle needed to
allow our DDS environment to use RPMsg as a mean of communication, as visible
on the schematic of the figure [[fig:map_agent]] below.
In particular, it will be useful to modify this agent in order to archive
the full RPMsg communication for ROS2[fn:19].
An [[https://micro.ros.org/docs/tutorials/advanced/create_custom_transports/][official documentation]] exists, but it gives little to no detail
on how to deploy such modified, custom transport setup.
This part of the guide will focus on it.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: The agent (red border) allows for a micro-ROS
#+CAPTION: instance to communicate with a ROS2 system.
#+CAPTION: It is deployed on the Linux side, as a ROS2 node.
#+NAME: fig:map_agent
[[file:./img/map_agent.png]]

** Building a XRCE-DDS agent in a Docker
The same command presented above for running a custom agent "bare-metal" can be
run inside a Docker.

#+BEGIN_SRC sh
docker run -d --name XRCE_DDS_Agent -it --net=host -v \
       /dev:/dev --privileged ros:iron
docker exec -it XRCE_DDS_Agent bash
#+END_SRC


#+BEGIN_SRC sh
git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
cd Micro-XRCE-DDS-Agent
docker build -t xrce-dds-agent .
docker run -it --privileged -v /dev:/dev xrce-dds-agent serial \
       --dev /dev/ttyACM0
#+END_SRC

** Building the Agent version with a modified transport
The first working implementation of the DDS over RPMsg happened over a
XRCE-DDS agent whose ~serial~ transport layer has been modified in order
to use OpenAMP's RPMsg instead.

The build process it the same as usual, just pulling from my fork of eProsima repository
and using the ~develop~ branch:

#+BEGIN_SRC sh
git clone https://github.com/sunoc/Micro-XRCE-DDS-Agent.git -b develop
cd Micro-XRCE-DDS-Agent
mkdir build
cd build
cmake ..
make
#+END_SRC

Giving that your are working from an environment in which the ROS2 tools are available, it is then possible
to run the Agent as follow[fn:21] [fn:22]:

#+BEGIN_SRC sh
source /opt/ros/$ROS_DISTRO/setup.bash

./MicroXRCEAgent serial --dev /dev/null --verbose 6
#+END_SRC


#+LATEX: \clearpage
* micro-ROS Talker

#+latex: \clearpage
* Running the ping-pong node                               :WORK_IN_PROGRESS:
A custom ping-pong node for ROS2 was developed in order to test the data transfer of the newly created
Agent / Client system.

In order to have this node up and running, you need to set basically all the previously presented points:
- The micro-ROS firmware is running on the R5F core, as presented in the section [[Loading the firmware]].
- On the same Linux you plan to run the node, you will need to run and keep the Agent, as presented
  in the section [[micro-ROS XRCE-DDS Agent]].
- This ping-pong application is released as a ROS2 Python node. It is best to pull and run it
  in a ROS2 environment to avoid having dependencies issues, as presented in the section about ROS2.

  #+latex: \clearpage
* Monitoring and performances evaluation                   :WORK_IN_PROGRESS:

  #+latex: \clearpage
* Shared memory data transfer system                       :WORK_IN_PROGRESS:


#+latex: \clearpage
* Conclusion & future                                      :WORK_IN_PROGRESS:

#+latex: \clearpage
* Publications


# ##############################################################################
#+LATEX: \clearpage
#+LATEX: \appendix
* DTO patch
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/system.patch][system.patch]]
#+LATEX: \inputminted[linenos, frame=single]{diff}{./src/system.patch}

#+LATEX: \clearpage
* Custom tool-chain CMake settings
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/custom_r5f_toolchain.cmake][custom r5f toolchain.cmake]]
#+LATEX: \inputminted[linenos, frame=single]{cmake}{./src/custom_r5f_toolchain.cmake}

#+LATEX: \clearpage
* Custom Colcon meta settings
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/custom_r5f_colcon.meta][custom r5f colcon.meta]]
#+LATEX: \inputminted[linenos, frame=single]{yaml}{./src/custom_r5f_colcon.meta}

#+LATEX: \clearpage
* Firmware time functions

** main
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/clock.c][clock.c]]
but a potentially more up-to-date version is visible
directly at the ~libmicroros_kv260~ repository: [[https://gitlab.com/sunoc/libmicroros_kv260/-/blob/4867e762f66af7b4647232eb4c0a31106db66e13/src/clock.c][clock.c]]

#+LATEX: \inputminted[linenos, frame=single]{c}{./src/clock.c}

** header file
#+BEGIN_SRC C
/**< Microseconds per second. */
#define MICROSECONDS_PER_SECOND    ( 1000000LL )  
/**< Nanoseconds per second. */
#define NANOSECONDS_PER_SECOND     ( 1000000000LL ) 
/**< Nanoseconds per FreeRTOS tick. */  
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) 
#+END_SRC


#+LATEX: \clearpage
* Firmware memory allocation functions

** main
This file is available in this repository: [[https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/blob/b7300116e153f4b5a1542f8804e4646db8030033/src/allocators.c][allocators.c]]
but a potentially more up-to-date version is visible
directly at the ~libmicroros_kv260~ repository: [[https://gitlab.com/sunoc/libmicroros_kv260/-/blob/4867e762f66af7b4647232eb4c0a31106db66e13/src/allocators.c][allocators.c]]

#+LATEX: \inputminted[linenos, frame=single]{c}{./src/allocators.c}

** header file
#+BEGIN_SRC C
#ifndef _ALLOCATORS_H_
#define _ALLOCATORS_H_

#include "microros.h"

extern int absoluteUsedMemory;
extern int usedMemory;


void * __freertos_allocate(size_t size, void * state);
void __freertos_deallocate(void * pointer, void * state);
void * __freertos_reallocate(void * pointer, size_t size, void * state);
void * __freertos_zero_allocate(size_t number_of_elements,
				size_t size_of_element, void * state);

#endif // _ALLOCATORS_H_
#+END_SRC
* [deprecated] Installing Linux (PetaLinux option)
This part is an alternative to the previous section [[Installing Ubuntu LTS 22.04]],
where the installation of PetaLinux as a host system[fn:24] will be presented,
as being an alternative to the Ubuntu LTS. Here are some reasoning why you'd
prefer to use PetaLinux instead of Ubuntu:
+ Direct support from Xilinx. While Ubuntu is also an official port, it is
  provided through Canonical.
+ If you plan to use ROS2 in containers.

It is also to be noted that the building process of a PetaLinux image is not as
trivial as simply flashing a downloaded ISO file. It takes some time to
configure it and even more time to be built, especially if you are working on a
lower-end machine.

** General installation
The indication on how to install PetaLinux on a KRIA board is detailed in the
official documentation[fn:25], but for the KV260 board with an older release of
the Linux. This guide will try to keep an up-to-date version of the guide, in
particular for the KR260 KRIA board and, at the time of writing, the PetaLinux
in version 2023.2 for the installer.  The 2022.2 version is recommended for this
board's latest updated boot firmware, as presented in the Section Boot firmware
above; however I happened to have issues with the building process from a system
based on Ubuntu 22.04. Thus the choice of the 2023.2 that should be compatible.

Two tools should be downloaded upfront in order to be ready and create the
PetaLinux image for our target board. Both can be obtained at the Xilinx
official download page[fn:26]. Login with an AMD account is required in order to
download the files we need, namely, we'll have to get:
+ The installer tool: ~petalinux-v2023.2-10121855-installer.run~ or similar name.
+ The SOM board support package: ~xilinx-kr260-starterkit-v2023.2-10140544.bsp~ or similar name[fn:29].
The specific name of the utils you'll get to download will evolve over time.

For the following command, I will assume that both files were downloaded into
the same directory and that you have a shell open in said directory.

Firstly, a crap ton of dependencies are needed. They are detailed in the
release notes of the version of the tool you are downloading and it depends on
your distribution, but here is a one-liner that works for the PetaLinux 2023.2
to be built on Ubuntu(-based) 22.04 LTS:
#+BEGIN_SRC sh
sudo apt-get install iproute2 gawk python3 build-essential gcc git make \
     net-tools libncurses5-dev tftpd zlib1g-dev libssl-dev flex bison libselinux1 \
     gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip \
     texinfo zlib1g-dev gcc-multilib automake zlib1g:i386 screen pax gzip cpio \
     python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git \
     python3-jinja2 libegl1-mesa libsdl1.2-dev pylint asciidoc
#+END_SRC

Testing, if building on Debian 12 the following variant of the same command has been confirmed to work:
#+BEGIN_SRC sh
sudo apt-get install iproute2 gawk python3 build-essential gcc git make \
net-tools libncurses5-dev tftpd-hpa zlib1g-dev libssl-dev flex bison libselinux1 \
gnupg wget git-core diffstat chrpath socat xterm autoconf libtool tar unzip \
texinfo zlib1g-dev gcc-multilib automake zlib1g screen pax gzip cpio python3-pip \
python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 \
libegl1-mesa libsdl1.2-dev pylint asciidoc
#+END_SRC

Installing the petalinux tools can be done with the ~.run~ script[fn:28], as follow:
#+BEGIN_SRC sh
sudo chmod +x ./petalinux-v2023.2-10121855-installer.run
./petalinux-v2023.2-10121855-installer.run
bash
source settings.sh
#+END_SRC

A project can then be created, using the ~.bsp~ file. From there it is possible to
build the image file meant to be booted by the board:
#+BEGIN_SRC sh
petalinux-create -t project -s xilinx-kr260-starterkit-v2023.2-10140544.bsp
cd xilinx-kr260-starterkit-2023.2/
#+END_SRC


The more general option allows to enable stuff related to hardware
configuration[fn:33]. For this step, it is possible to select the ~openAMP~
setting the the DTG Settings, as visible in the Figure [[fig:yocto_openamp_dtg]] below:
#+BEGIN_SRC sh
petalinux-config --get-hw-description  ./hardware/xilinx-kr260-starterkit-2023.2/kr260_starter_kit.xsa
#+END_SRC

Then, here are the options that we want to enable:
#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: In the hardware config, it is possible to select the openamp device tree source.
#+NAME: fig:yocto_openamp_dtg
[[file:./img/yocto_openamp_dtg.png]]

Some kernel and module configuration are needed in order for the petalinux system to work properly.
These setup can be set using the following command:
#+BEGIN_SRC sh
petalinux-config -c rootfs
#+END_SRC

Then, here are the options that we want to enable:
#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: In the rootfs config, it is possible to select the openamp package.
#+NAME: fig:yocto_openamp
[[file:./img/yocto_openamp.png]]


#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: OpenSSH can be configure in the same rootfs config.
#+NAME: fig:yocto_ssh
[[file:./img/yocto_ssh.png]]

It is then possible to build[fn:32] and package the image. Most critically compared to the example,
the ~openamp.dtb~ overlay must be used in order for OpenAMP and subsequently RPMsg to become usable.
#+BEGIN_SRC sh
petalinux-build
petalinux-package --wic --bootfiles "ramdisk.cpio.gz.u-boot boot.scr Image system.dtb"
#+END_SRC

#+LATEX: \begin{tcolorbox}[colback=red!5!white,colframe=red!75!black]
*DANGER*: The next part involve the ~dd~ command writing on disks!!!
As always with the dd command, thou have to be *VERY* careful on what arguments
thou give. Selecting the wrong disk will result on the destruction of
thy data !!
_If you are unsure of what to do, seek assistance !_
#+LATEX: \end{tcolorbox}

Finally, and now an image has been generated, it can be burnt to a micro-SD card the usual way:
#+BEGIN_SRC sh
sudo dd if=./images/linux/petalinux-sdimage.wic \
     of=/dev/sda status=progress bs=8M && sync
#+END_SRC

From that point, the media can be ejected, put in the board and the boot process
should happen successfully.

** First login
On the first start, if you have a serial terminal open to the KR260 board, you'll be prompter to enter a login.
The default user it ~petalinux~. You'll then be prompted to enter a password.

** Testing openamp "echo-test"
A good and out-of-the-box way to try and confirm that the OpenAMP setup was done
properly is to run the so-called "echo-test". This program will basically send
series of packages to the R5F core and expect them to be returned.

As presented in the official documentation[fn:34], this can be simply done with
the following commands. If the return of the ~echo_test~ commands states that zero
error occurs, the system should be good to go:
#+BEGIN_SRC sh
sudo -s
echo image_echo_test  > /sys/class/remoteproc/remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
echo_test
echo stop > /sys/class/remoteproc/remoteproc0/state
#+END_SRC

** "echo-test" performance comparison

*** Raw plot of the package measurement                          :noexport:
#+BEGIN_SRC python :results file :eval no-export
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

df_kr = pd.read_csv('./csv/kr260_echo_test.csv', names=['time KR260 (PetaLinux)'])
df_kv = pd.read_csv('./csv/kv260_echo_test.csv', names=['time KV260 (Ubuntu)'])

df_payload = pd.DataFrame([s] for l in range(0, 10, 1) for s in range(17, 489, 1))

df_tot_2 = pd.concat([df_kr, df_kv, df_payload], sort=False, axis=1)

df_tot_2 = df_tot_2.rename(columns={0:'Payload size'})

df_tot_2['time KR260 (PetaLinux)'] = df_tot_2['time KR260 (PetaLinux)'].div(df_tot_2['Payload size'])
df_tot_2['time KV260 (Ubuntu)'] = df_tot_2['time KV260 (Ubuntu)'].div(df_tot_2['Payload size'])

df_tot_2 = df_tot_2.sort_values(by=['Payload size'], ascending=True)
df_tot_2 = df_tot_2.drop(columns=['Payload size'])

df_tot_2 = df_tot_2.reset_index(drop=True)

df_tot_2 = 1/df_tot_2
df_tot_2 = df_tot_2.mul(1000)

plt.rc('font', size=10)

scatterplot = df_tot_2.plot(style='.', grid='true')
scatterplot.set_xlabel('Package sent [n]')
scatterplot.set_ylabel('Data throughput [MB/s]')
# scatterplot.set_yscale("log");
# densityplot = df_tot_2.plot.density(grid='true', xlim=[0.2, 0.9])
# densityplot.set_xlabel('Round trip time for one RPMsg package [us]')
# densityplot.set_ylabel('Probability density [%]')
plt.savefig('./img/kr260_echo_test_density.png', dpi=400, bbox_inches='tight')
return './img/kr260_echo_test_density.png'
#+END_SRC

#+RESULTS:
[[file:./img/kr260_echo_test_density.png]]


*** Report :ignore:
Now we have a working demonstration for RPMsg, a goal was to compare this system between boards.

Here is the complete sequence in order to archive a timely measured ~echo_test~ run, namely:
- Installation of the build dependencies
- Clone of the Xilinx repository
- Patching of the main source to add the time measurement
- Building of the test software
- Communication with the R5F, with reload of the firmware
#+BEGIN_SRC sh
sudo dnf install git make gcc binutils packagegroup-core-buildessential
sudo ln -s /usr/bin/aarch64-xilinx-linux-gcc /bin/cc
git clone https://github.com/OpenAMP/openamp-system-reference.git
cd openamp-system-reference/examples/linux/rpmsg-echo-test/
wget https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/raw/main/src/echo_test.patch
patch -u -b echo_test.c -i echo_test.patch
make
sudo -s
echo image_echo_test  > /sys/class/remoteproc/remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
./echo_test
echo stop > /sys/class/remoteproc/remoteproc0/state
#+END_SRC


The figure [[fig:kr260_echo_test_density]] below shows a comparison for the data
throughput that is reachable for a packages round trip of individual RPMsg
packages for both PetaLinux running on the KR260 board and Ubuntu running on the
KV260.

A difference exist but it is not as significant as to explain the rather slow
transfer rate when used in combination with ROS2 DDS.

#+ATTR_LATEX: :width .6\textwidth
#+CAPTION: A graph of the data transfer rate for individual packages to be transmitted and received back from the Linux.
#+NAME: fig:kr260_echo_test_density
[[file:./img/kr260_echo_test_density.png]]

This fast delay for data transmission was later confirmed by measurement done using an external logic analyser[fn:35].

** Enabling SSH
** Setting up a static IP address for PetaLinux
This is not a trivial task in petalinux.

As it appears, the classic ~/etc/network/interfaces~ must be modified, however and
for some unknown reason the DHCP keep being used even when disabled, and the
actual static interface is not used until restarted.

Multiple steps are required in order to mitigate all of this.

First, we can make our standard ~interfaces~ configuration, in the  ~/etc/network/interfaces~:
#+BEGIN_SRC sh
# Wired or wireless interfaces
auto eth0
iface eth0 inet static
address 192.168.11.107
netmask 255.255.255.0
network 192.168.11.0
gateway 192.168.11.1
#+END_SRC

Then we need to have ~systemd~ to run a script after boot time to restart the ~eth0~ interface.

A very basic script, as follow need to be placed somewhere on the system, for example here, in the ~/home/root/net.sh~:
#+BEGIN_SRC sh
#!/bin/sh -e
ifdown eth0
ifup eth0
exit 0
#+END_SRC

Then, we want to create a ~systemd~ service that will run this script as ~idle~,
i.e. after all the rest. Said file, in our case named ~updown.service~ must be
placed in the ~/etc/systemd/system/~ directory:
#+BEGIN_SRC yaml
[Unit]
Description=Restart once more the eth0 network to enable the static IP

[Service]
Type=idle
ExecStart=/bin/sh /home/root/net.sh

[Install]
WantedBy=multi-user.target
#+END_SRC

Finally, as a ~root~ we need to set the correct right for these files and finally enabling the service before reboot:
#+BEGIN_SRC sh
sudo -s
chmod +x /home/root/net.sh
chmod 644 /etc/systemd/system/updown.service
systemctl enable updown.service
reboot now
#+END_SRC

With all of this, on the next reboot of the board, the static IP should be available alongside the DHCP IP.

** Note: good points for PetaLinux over Ubuntu :noexport:
+ The boot process in insanely faster: a few seconds for PetaLinux versus multiple minutes with Ubuntu.
+ +The fan is silent all the way through, and seemingly managed in a better way.+
  This seems to stop being true once we update the board packages with
  ~dnf~. Unknown reason for now. There is an issue with the ZynqMP Linux PIN
  control system, as visible in the ~dmesg~ log.
+ OpenAMP and the echo test app works fairly "out of the box" if configured
  properly during the build process.

* Footnotes
[fn:35] https://gitlab.com/sunoc/saleae-logic-8-documentation

[fn:34] https://xilinx.github.io/kria-apps-docs/openamp/build/html/openamp_landing.html#openamp-demos 

[fn:33] If you search in the work directory, you might notice that three
differently named ~.xsa~ files exist. After a quick ~diff~ check, they appear to be
exactly identical.

[fn:32] Beware, the ~petalinux-build~ command execution takes a lot of time. 

[fn:31] https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/1641152513/Kria+SOMs+Starter+Kits#K26-Boot-Firmware-Updates 

[fn:29] As of the time of writing this section, it was recommended[fn:31] to be
using the boot firmware in version 2022.2. Thus the software pack for the board
will also be using this version.

[fn:28] It is to be noted that the ~source~ command will run best on ~bash~. Trying
to run it on ~zsh~ for ex. will cause issues. This can be enforced with the
command ~sudo dpkg-reconfigure bash~.

[fn:27] https://github.com/eProsima/Micro-XRCE-DDS-Agent/blob/develop/src/cpp/transport/custom/CustomAgent.cpp

[fn:26] https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools/2022-2.html

[fn:25] https://xilinx.github.io/kria-apps-docs/kv260/2021.1/build/html/docs/build_petalinux.html

[fn:24] It is to be noted that for this part, the "other" KRIA board (KR260) was
used instead of the KV260 that was being used for everything tried on top of
Ubuntu. No significant difference should be noted.

[fn:23] micro-ROS Client firmware version 0.1, the first working version: https://gitlab.com/sunoc/libmicroros_kv260/-/tree/0.1

[fn:22] The ~--verbose 6~ allows to see the maximum amount of information about the data being transmitted. 

[fn:21] The ~--dev /dev/null~ option is only a placeholder as the serial requires it but not RPMsg.

[fn:20] micro-ROS ping pong test firmware repository: https://gitlab.com/sunoc/libmicroros_kv260 

[fn:19] This will be done with ROS2 agents "custom transport"  system,
which has little documentation. Some [[https://github.com/micro-ROS/micro_ros_setup/issues/383][discussions]] about it exist though.

[fn:18] This information was eventually found on a discussion in a [[https://github.com/micro-ROS/micro_ros_setup/issues/591][GitHub Issue thread]]. 

[fn:12] It is also important to note that the ~echo_test~ part is specific for the
RPMsg base demonstration firmware. It is not to be used for other firmware.

[fn:11] In this sequence, we are entering a root shell with ~sudo -s~, but this can
also be archived by putting the commands in a script to be executed with ~sudo~. 

* References
[[bibliographystyle:ieeetr]]
[[bibliography:~/Documents/Bibliography/references.bib]]
