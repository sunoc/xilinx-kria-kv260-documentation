:PROPERTIES:
:ID:       54ac81d8-2545-47ac-b2d0-a18417086f2c
:END:
#+title: KRIA board Building micro-ROS as a static library

This section will present the way to build manually the micro-ROS system as static library
that can be used to port it to a different platform.

** Initial setup
In this section, the goal is to build the micro-ROS library in order to be
able to integrate it's functions into our Cortex R5F firmware.

All of this should be done via cross-compiling on a host machine, however
it is most common in the guides about micro-ROS to build the firmware and libraries within a Docker,
so we can have access of the ROS environment without installing it permanently.

One can simply run this command to summon a ROS2 Docker[fn:8] with the wanted version,
but first we also need to check the cross-compilation tools.

We are downloading the latest ~arm-none-eabi~ gcc compiler directly from the ARM website.

The cross-compilation tool can then be extracted, set as our ~toolchain~ variable,
then passed as a parameter when creating the Docker container:
#+BEGIN_SRC sh
pushd /home/$USER/Downloads
wget https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
tar -xvf arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
popd

toolchain="/home/$USER/Downloads/arm-gnu-toolchain-13.2.Rel1-x86_64-arm-none-eabi/"


docker run -d --name ros_build -it --net=host \
       --hostname ros_build \
       -v $toolchain:/armr5-toolchain \
       --privileged ros:iron
#+END_SRC

#+RESULTS:

Now the container named ~ros_build~ was created, it is possible to "enter" it, and having access
to the tools in it by running the following command that will open a ~bash~ shell in said container:
#+BEGIN_SRC sh
docker exec -it ros_build bash
#+END_SRC

** Building the static library
Now we are in the ROS2 container, we can build the micro-ROS firmware as presented
in the [[https://micro.ros.org/docs/tutorials/advanced/create\_custom\_static\_library][dedicated micro-ROS guide]]:
#+BEGIN_SRC sh
echo 127.0.0.1 $HOSTNAME >> /etc/hosts
sudo apt update 
sudo apt-get -y install python3-pip \
     wget \
     nano

. /opt/ros/$ROS_DISTRO/setup.bash

mkdir microros_ws
cd microros_ws
git clone -b $ROS_DISTRO \
    https://github.com/micro-ROS/micro_ros_setup.git \
    src/micro_ros_setup

sudo rosdep fix-permissions &&\
    rosdep update &&\
    rosdep install --from-paths src --ignore-src -y

colcon build
. ./install/local_setup.bash

ros2 run micro_ros_setup create_firmware_ws.sh generate_lib
#+END_SRC


From that point, we will need some extra configuration files for our Cortex R5F.

Both configuration files[fn:9] will be downloaded from my repository;
we also are going to copy the cross-compiler into the microros workspace,
then we can build the library with the following ros2 command:
#+BEGIN_SRC sh
wget https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/raw/main/src/custom_r5f_toolchain.cmake

wget https://gitlab.com/sunoc/xilinx-kria-kv260-documentation/-/raw/main/src/custom_r5f_colcon.meta

cp -r /armr5-toolchain/ $(pwd)/firmware/toolchain && \
    export PATH=$PATH:$(pwd)/firmware/toolchain/bin

ros2 run micro_ros_setup build_firmware.sh \
     $(pwd)/custom_r5f_toolchain.cmake \
     $(pwd)/custom_r5f_colcon.meta
#+END_SRC

* Footnotes
[fn:9] Both files are also visible in the appendixes [[Custom tool-chain CMake settings]]
and [[Custom Colcon meta settings]] the end of this report.}

[fn:8] If Docker is not set up on your machine, you can follow the guide on [[https://docs.docker.com/engine/install/ubuntu/][the official website]].
When you can successfully run the "hello-world" container, you are good to go.

