--- echo_test.c.orig	2023-11-29 20:19:54.042268088 -0800
+++ echo_test.c	2023-11-30 23:44:15.804989805 -0800
@@ -44,6 +44,13 @@
 
 #define PR_DBG(fmt, args ...) printf("%s():%u "fmt, __func__, __LINE__, ##args)
 #define SHUTDOWN_MSG    0xEF56A55A
+
+long long int timespecDiff(struct timespec *timeA_p, struct timespec *timeB_p)
+{
+  return ((timeA_p->tv_sec * 1000000000) + timeA_p->tv_nsec) -
+           ((timeB_p->tv_sec * 1000000000) + timeB_p->tv_nsec);
+}
+
 void send_shutdown(int fd)
 {
 	union {
@@ -78,7 +85,7 @@
 	int ret, i, j;
 	int size, bytes_rcvd, bytes_sent, err_cnt = 0;
 	int opt, charfd, fd;
-	int ntimes = 1;
+	int ntimes = 10;
 	char rpmsg_dev[NAME_MAX] = "virtio0.rpmsg-openamp-demo-channel.-1.0";
 	char rpmsg_ctrl_dev_name[NAME_MAX] = "virtio0.rpmsg_ctrl.0.0";
 	char rpmsg_char_name[16];
@@ -91,6 +98,24 @@
 	struct _payload *i_payload;
 	struct _payload *r_payload;
 
+	struct timespec start, end;
+	long long int timeElapsed;
+
+	FILE *fPtr;
+	char catdata[] = "";
+
+	fPtr = fopen("./data.csv", "a");
+
+
+	/* fopen() return NULL if unable to open file in given mode. */
+	if (fPtr == NULL)
+	  {
+	    /* Unable to open file hence exit */
+	    printf("\nUnable to open data.csv file.\n");
+	    printf("Please check whether file exists and you have write privilege.\n");
+	    exit(EXIT_FAILURE);
+	  }
+
 	printf("\r\n Echo test start \r\n");
 	lookup_channel(rpmsg_dev, &eptinfo);
 
@@ -168,6 +193,7 @@
 		printf("\r\n  Echo Test Round %d \r\n", j);
 		printf("\r\n **********************************");
 		printf("****\r\n");
+
 		for (i = 0, size = PAYLOAD_MIN_SIZE; i < NUM_PAYLOADS;
 		i++, size++) {
 			int k;
@@ -182,6 +208,7 @@
 			printf(" %ld of size %lu\r\n", i_payload->num,
 			(2 * sizeof(unsigned long)) + size);
 
+			clock_gettime(CLOCK_MONOTONIC, &start);
 			bytes_sent = write(fd, i_payload,
 			(2 * sizeof(unsigned long)) + size);
 
@@ -190,33 +217,45 @@
 				printf(" .. \r\n");
 				break;
 			}
-			printf("echo test: sent : %d\n", bytes_sent);
+			/* printf("echo test: sent : %d\n", bytes_sent); */
 
 			r_payload->num = 0;
 			bytes_rcvd = read(fd, r_payload,
 					(2 * sizeof(unsigned long)) + PAYLOAD_MAX_SIZE);
 			while (bytes_rcvd <= 0) {
-				usleep(10000);
+				/* usleep(10000); */
 				bytes_rcvd = read(fd, r_payload,
 					(2 * sizeof(unsigned long)) + PAYLOAD_MAX_SIZE);
 			}
-			printf(" received payload number ");
-			printf("%ld of size %d\r\n", r_payload->num, bytes_rcvd);
+			/* printf(" received payload number "); */
+			/* printf("%ld of size %d\r\n", r_payload->num, bytes_rcvd); */
+
 
 			/* Validate data buffer integrity. */
 			for (k = 0; k < r_payload->size; k++) {
 
-				if (r_payload->data[k] != 0xA5) {
-					printf(" \r\n Data corruption");
-					printf(" at index %d \r\n", k);
-					err_cnt++;
-					break;
-				}
+			  if (r_payload->data[k] != 0xA5)
+			    {
+			      printf(" \r\n Data corruption");
+			      printf(" at index %d \r\n", k);
+			      err_cnt++;
+			      break;
+			    }
 			}
 			bytes_rcvd = read(fd, r_payload,
 			(2 * sizeof(unsigned long)) + PAYLOAD_MAX_SIZE);
 
+			clock_gettime(CLOCK_MONOTONIC, &end);
+			timeElapsed = timespecDiff(&end, &start);
+			printf("\r\n The data pingpong took %lld ns\r\n",
+			       timeElapsed);
+			/* Append data to file */
+
+			sprintf(catdata, "%lld\n", timeElapsed);
+			fputs(catdata, fPtr);
 		}
+
+
 		printf("\r\n **********************************");
 		printf("****\r\n");
 		printf("\r\n Echo Test Round %d Test Results: Error count = %d\r\n",
@@ -229,6 +268,8 @@
 	free(i_payload);
 	free(r_payload);
 
+	fclose(fPtr);
+
 	close(fd);
 	if (charfd >= 0)
 		close(charfd);
